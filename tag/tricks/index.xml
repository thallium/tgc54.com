<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tricks | Thallium54</title><link>https://tgc54.com/tag/tricks/</link><atom:link href="https://tgc54.com/tag/tricks/index.xml" rel="self" type="application/rss+xml"/><description>Tricks</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Fri, 22 Jul 2022 09:51:55 -0400</lastBuildDate><image><url>https://tgc54.com/media/icon_hu423b19687c85b10febae54029c442fbf_4135_512x512_fill_lanczos_center_3.png</url><title>Tricks</title><link>https://tgc54.com/tag/tricks/</link></image><item><title>Bundle C++ Code with Clang</title><link>https://tgc54.com/post/bundle-cpp-code/</link><pubDate>Fri, 22 Jul 2022 09:51:55 -0400</pubDate><guid>https://tgc54.com/post/bundle-cpp-code/</guid><description>&lt;p>As a competitive programmer, I always want to find a solution to avoid copy-and-pasting my algorithm library so I can write more complex code lol.&lt;/p>
&lt;p>Inspired by &lt;a href="https://codeforces.com/profile/Egor" target="_blank" rel="noopener">Egor&lt;/a>&amp;rsquo;s rust bundler, I wondered is there something similar for C++? I remembered that I read &lt;a href="https://codeforces.com/blog/entry/77139" target="_blank" rel="noopener">this&lt;/a> long time ago then I spent some time finding that blog but it&amp;rsquo;s not a bundler and looks quite complicated. In the comment someone mentioned using the &lt;code>cpp&lt;/code> command which does the preprocessing work. As you may know, &lt;code>#include&lt;/code> is basically copy-and-paste so this actually sounds right, but the problem is that it also copies and pastes the standard library which is over 200k+ lines of code. So I dug a bit further to see if it&amp;rsquo;s possible to skip system header and found &lt;a href="https://stackoverflow.com/a/20889599" target="_blank" rel="noopener">this&lt;/a>, but it only works for clang which what I&amp;rsquo;m using so I didn&amp;rsquo;t look for a solution for gcc.&lt;/p>
&lt;p>The command is:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">clang++ -I/your/path/to/library/ -E -P -nostdinc++ -nobuiltininc main.cpp &amp;gt; bundled.cpp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Explanation:&lt;/p>
&lt;ul>
&lt;li>&lt;code>-E&lt;/code> Only run the preprocessor&lt;/li>
&lt;li>&lt;code>-P&lt;/code> Disable linemarker output in -E mode&lt;/li>
&lt;li>&lt;code>-nostdinc++&lt;/code> Disable standard #include directories for the C++ standard library&lt;/li>
&lt;li>&lt;code>-nobuiltininc&lt;/code> Disable builtin #include directories (may not be needed)&lt;/li>
&lt;/ul>
&lt;p>As &lt;code>#include&lt;/code> of system header isn&amp;rsquo;t preserved, you can add the system headers using another command and I made a shell function to do that:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">expand_cpp &lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> clang++ -I/your/path/to/library/ -E -P -nostdinc++ -nobuiltininc &lt;span class="nv">$1&lt;/span> &amp;gt; bundled.cpp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> gsed -i &lt;span class="s2">&amp;#34;1s/^/#include &amp;lt;bits\/stdc++.h&amp;gt;\n/&amp;#34;&lt;/span> bundled.cpp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>